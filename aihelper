#!/bin/bash

############ Arch Install Helper ####################
source cosmetics
cosmetics

	
locale_selector () {

    input_print "Please insert the locale you use (format: xx_XX. Enter empty to use US):"
    read -r locale
    case "$locale" in
        '') locale="en_US.UTF-8"
            info_print "$locale will be the default locale."
            return 0;;
        '/') sed -E '/^# +|^#$/d;s/^#| *$//g;s/ .*/ (Charset:&)/' /etc/locale.gen | less -M
                clear
                return 1;;
        *)  if ! grep -q "^#\?$(sed 's/[].*[]/\\&/g' <<< $locale) " /etc/locale.gen; then
                error_print "The specified locale doesn't exist or isn't supported."
                return 1
            fi
            return 0
    esac
}

		until locale_selector; do : ; done
		clear

			
		input_print "Path to Disk Installation device (eg. /dev/sda etc): "
		read -r DISK
		input_print "Path to EFI Disk (eg. /dev/sda1 etc): "
		read -r EFI_DISK
		input_print "Path to SWAP Disk (eg. /dev/sda1 etc): "
		read -r SWAP_DISK
		input_print "Path to ROOT Disk (eg. /dev/sda1 etc): "
		read -r ROOT_DISK
		input_print "Path to HOME Disk (eg. /dev/sda1 etc): "
		read -r HOME_DISK
		
		### FORMATTING PARTITIONS

	## Format ESP/EFI Partition as FAT32 with filesystem label Arch-EFI
        info_print "Formatting EFI Partition as fat32 filesystem..."
    	sudo mkfs.vfat -F 32 -n Arch-EFI $EFI_DISK
    #
    # Format SWAP Partition with filesystem label Arch-SWAP
        info_print "Creating SWAP partition..."
    	sudo mkswap -L Arch-SWAP $SWAP_DISK
    #
    # Format ROOT Partition with filesystem label Arch-ROOT
        info_print "Formatting ROOT partition as btrfs filesystem..."
    	sudo mkfs.btrfs -L Arch-ROOT -f -n 32k $ROOT_DISK
    #
    # Format HOME Partition with filesystem label Arch-HOME
        info_print "Formatting HOME partition as ext4 filesystem..."
    	sudo mkfs.ext4 -L Arch-HOME $HOME_DISK

    # Printing out partition layout
        info_print "Partition layout..."
    	sudo sgdisk -p $DISK
	
		input_print "Press any key to continue..."		
		read -n 1 -s -r

		EFI_UUID=$(lsblk -o UUID $EFI_DISK | grep -v UUID)
		SWAP_UUID=$(lsblk -o UUID $SWAP_DISK | grep -v UUID)
		ROOT_UUID=$(lsblk -o UUID $ROOT_DISK | grep -v UUID)
		HOME_UUID=$(lsblk -o UUID $HOME_DISK | grep -v UUID)
	
		echo "efi_uuid=$EFI_UUID" > UUID.txt
		echo "swap_uuid=$SWAP_UUID" >> UUID.txt
		echo "root_uuid=$ROOT_UUID" >> UUID.txt
		echo "home_uuid=$HOME_UUID" >> UUID.txt	

		### Mount and Create Subvolumes

	info_print "Mounting the root BTRFS partition..."
        sudo mount UUID="$ROOT_UUID" /mnt &>/dev/null

        info_print "Create subvolume/mnt/@ "
        sudo btrfs subvolume create /mnt/@ &>/dev/null

        info_print "Create subvolume /mnt/@/.snapshots"
        sudo btrfs subvolume create /mnt/@/.snapshots &>/dev/null

    	info_print "Create directory /mnt/@/.snapshots/1..."
    	sudo mkdir /mnt/@/.snapshots/1 &>/dev/null

        info_print "Create subvolume /mnt/@/.snapshots/1/snapshot"
        sudo btrfs subvolume create /mnt/@/.snapshots/1/snapshot &>/dev/null

        info_print "Create directory /mnt/@/boot"
        sudo mkdir /mnt/@/boot &>/dev/null

        info_print "Create subvolume /mnt/@/boot/grub"
        sudo btrfs subvolume create /mnt/@/boot/grub &>/dev/null

        info_print "Create subvolume /mnt/@/opt"
        sudo btrfs subvolume create /mnt/@/opt &>/dev/null

        info_print "Create subvolume /mnt/@/root"
        sudo btrfs subvolume create /mnt/@/root &>/dev/null

        info_print "Create subvolume /mnt/@/srv"
        sudo btrfs subvolume create /mnt/@/srv &>/dev/null

        info_print "Create subvolume /mnt/@/tmp"
        sudo btrfs subvolume create /mnt/@/tmp &>/dev/null

        info_print "Create directory /mnt/@/usr"
        sudo mkdir /mnt/@/usr &>/dev/null

        info_print "Create subvolume /mnt/@/usr/local"
        sudo btrfs subvolume create /mnt/@/usr/local &>/dev/null

        info_print "Create directory /mnt/@/var"
        sudo mkdir /mnt/@/var &>/dev/null

		info_print "Create subvolume /mnt/@/var/cache"
        sudo btrfs subvolume create /mnt/@/var/cache &>/dev/null

        info_print "Create subvolume /mnt/@/var/log"
        sudo btrfs subvolume create /mnt/@/var/log &>/dev/null

        info_print "Create subvolume /mnt/@/var/spool"
        sudo btrfs subvolume create /mnt/@/var/spool &>/dev/null

        info_print "Create subvolume /mnt/@/var/tmp"
        sudo btrfs subvolume create /mnt/@/var/tmp &>/dev/null

        Date=$(date +"%Y-%m-%d %H:%M:%S")
        sed "s|temp|$Date|g" info-dummy.xml > info.xml
        sudo cp info.xml /mnt/@/.snapshots/1/

       	info_print "Setting default subvolume..."
        sudo btrfs subvolume set-default $(btrfs subvolume list /mnt | grep "@/.snapshots/1/snapshot" | grep -oP '(?<=ID )[0-9]+') /mnt

        info_print "Enabling quotas on btrfs filesystem..."
        sudo btrfs quota enable /mnt

        info_print "Disable CoW on /@/var subvolume..."
        sudo chattr +C /mnt/@/var/cache
        sudo chattr +C /mnt/@/var/log
        sudo chattr +C /mnt/@/var/spool
        sudo chattr +C /mnt/@/var/tmp

	info_print "Created  subvolumes on /mnt: (sudo btrfs subvolume list /mnt)"
        sudo btrfs subvolume list /mnt

	input_print "Press any key to continue..."
        read -n 1 -s -r
	info_print ""

        sudo umount /mnt
	clear

### End of phase one ########
### Phase 2 #######

	mount UUID="$ROOT_UUID" -o compress=zstd /mnt
    ### Make Mountpoints for Subvolumes
        info_print "Creating mountpoints for subvolumes inside root; home and efi..."

        sudo mkdir /mnt/.snapshots
        sudo mkdir -p /mnt/boot/grub
        sudo mkdir /mnt/opt
        sudo mkdir /mnt/root
        sudo mkdir /mnt/srv
        sudo mkdir /mnt/tmp
        sudo mkdir -p /mnt/usr/local
        sudo mkdir -p /mnt/var/cache
        sudo mkdir /mnt/var/log
        sudo mkdir /mnt/var/spool
        sudo mkdir /mnt/var/tmp
        sudo mkdir /mnt/efi
        sudo mkdir /mnt/home

		pacman -Syy
		pacman -S tree
		clear

		info_print "The following mountpoints were just created:"
		tree -L 3 /mnt
		input_print "Press any key to continue..."
		read -n 1 -s -r
		info_print ""
		clear

		info_print "Mounting ROOT subvolumes, HOME and swapon..."
        sudo mount UUID="$ROOT_UUID" -o subvol=@/.snapshots,compress=zstd /mnt/.snapshots
        sudo mount UUID="$ROOT_UUID" -o subvol=@/boot/grub,compress=zstd /mnt/boot/grub
        sudo mount UUID="$ROOT_UUID" -o subvol=@/opt,compress=zstd /mnt/opt
        sudo mount UUID="$ROOT_UUID" -o subvol=@/root,compress=zstd /mnt/root
        sudo mount UUID="$ROOT_UUID" -o subvol=@/srv,compress=zstd /mnt/srv
        sudo mount UUID="$ROOT_UUID" -o subvol=@/tmp,compress=zstd /mnt/tmp
        sudo mount UUID="$ROOT_UUID" -o subvol=@/usr/local,compress=zstd /mnt/usr/local
        sudo mount UUID="$ROOT_UUID" -o subvol=@/var/cache,nodatacow /mnt/var/cache
        sudo mount UUID="$ROOT_UUID" -o subvol=@/var/log,nodatacow /mnt/var/log
        sudo mount UUID="$ROOT_UUID" -o subvol=@/var/spool,nodatacow /mnt/var/spool
        sudo mount UUID="$ROOT_UUID" -o subvol=@/var/tmp,nodatacow /mnt/var/tmp
        sudo mount UUID="$EFI_UUID" /mnt/efi
        sudo mount UUID="$HOME_UUID" /mnt/home
        sudo swapon UUID="$SWAP_UUID"
		clear

		info_print "Verify partitions, formatting and mountpoints!"
		sudo lsblk $DISK -o NAME,SIZE,FSTYPE,MOUNTPOINTS
		input_print "Press any key to continue..."
		read -n 1 -s -r
		info_print ""
		clear

### End of Phase Two ####

### Pacstrap Installation ###
Base_Packages="base linux linux-headers intel-ucode linux-firmware sof-firmware base-devel btrfs-progs ntfs-3g nano vim tree grub grub-btrfs efibootmgr os-prober snapper snap-pac mtools dosfstools networkmanager network-manager-applet reflector git man-db man-pages texinfo wpa_supplicant dialog pulseaudio pavucontrol alsa-utils alsa-plugins xdg-utils xdg-user-dirs"
input_print "Press any key to Pacstrap /mnt installation..."
read -n 1 -s -r

pacstrap /mnt $Base_Packages
info_print "Base packages installation done..."
input_print "Press any key to continue..."
read -n 1 -s -r
clear

###################### Generate fstab and Edit fstab ##########################
# Generate_fstab
info_print "Generating fstab..."
genfstab -U /mnt >> /mnt/etc/fstab

## Editing fstab
full_opts=$(grep subvolid=258 /mnt/etc/fstab | awk ' {print $4} ')
last_col="0  0"
opts=$(echo $full_opts | sed "s|,subvolid=258,subvol=/@/.snapshots/1/snapshot||")
SUB="UUID=$ROOT_UUID \t \t /\t\t  btrfs \t $opts \t $last_col"
sed -i "/subvolid=258/ c $SUB" /mnt/etc/fstab

##  Edit 10_linux and 20_linux_xen files
sed -i 's/rootflags=subvol=${rootsubvol}//g' /mnt/etc/grub.d/10_linux
sed -i 's/rootflags=subvol=${rootsubvol}//g' /mnt/etc/grub.d/20_linux_xen

#################### System configurations without chrooting ##########
info_print "Configuring system..."

info_print "Setting hostname..."
echo archie39 > /mnt/etc/hostname

info_print "Configuring locale and console keymap..."
sed -i "/^#$locale/s/^#//" /mnt/etc/locale.gen
echo "LANG=$locale" > /mnt/etc/locale.conf
echo "KEYMAP=us" > /mnt/etc/vconsole.conf


info_print "Setting up hosts file."
cat > /mnt/etc/hosts <<EOF
127.0.0.1       localhost
::1                     localhost
127.0.1.1       archie39.localdomain   archie39
EOF

info_print "Editing pacman.conf..."
sed -i 's/#Color/Color/' /mnt/etc/pacman.conf
sed -i '/Color/ a ILoveCandy' /mnt/etc/pacman.conf
sed -i 's/#ParallelDownloads/ParallelDownloads/' /mnt/etc/pacman.conf

info_print "Setting root password."
echo "root:haokip" | arch-chroot /mnt chpasswd

# Setting user account with sudo privileges
info_print "Setting User Account..."
echo "%wheel ALL=(ALL:ALL) ALL" > /mnt/etc/sudoers.d/wheel
info_print "Adding User haopu to the system with root privileges."
arch-chroot /mnt useradd -m -G wheel -s /bin/bash haopu
info_print "Setting User password for haopu."
echo "haopu:haokip" | arch-chroot /mnt chpasswd

input_print "Press any key to continue..."
read -n 1 -s -r
info_print ""
clear

#### Main chroot section
info_print "Settings inside arch-chroot..."
arch-chroot /mnt /bin/bash -e <<EOF
        # Setting up timezone
        echo "Setting up timezone..."
        ln -sf /usr/share/zoneinfo/$(curl -s http://ip-api.com/line?fields=timezone) /etc/localtime &>/dev/null

        pacman -Syy

        # Synchronize clocks
        echo "Synchronizing hwclock to systohc..."
         hwclock --systohc

		# Initialize Snapper
        echo "Initializing Snapper..."
        umount /.snapshots
        rm -r /.snapshots
        snapper --no-dbus -c root create-config /
        btrfs subvolume delete /.snapshots
        mkdir /.snapshots
        mount -a
        chmod 750 /.snapshots

        # 4. Generating locales
        locale-gen

        # 5. Installing GRUB.
        echo "Installing GRUB..."
        grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=ARCH-B --modules="normal test efi_gop efi_uga search echo linux all_video gfxmenu gfxterm_background gfxterm_menu gfxterm loadenv configfile gzio part_gpt btrfs"
		grub-mkconfig -o /boot/grub/grub.cfg
	
		systemctl enable NetworkManager

        exit
EOF

# Copy post-install script (including related files, if any)
sudo cp post-install.sh /mnt/home/haopu/
sudo cp cosmetics /mnt/home/haopu/
sudo cp UUID.txt /mnt/home/haopu/
sudo umount -a &>/dev/null
clear
info_print "                    Installation Complete!"
info_print "                 Type reboot and press Enter."
info_print "IMPORTANT! After reboot, you must still run the post-install.sh script."
info_print "1. Log back in as your username (not root!)."
info_print "2. Run the script: ./post-install.sh"
info_print "3. NOTE: You will be greeted with a black tty1. "
info_print ""
info_print ""
info_print "You are now ready to reboot...press any key to continue..."
read -n 1 -s -r
exit

